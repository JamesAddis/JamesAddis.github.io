name: James Addis
support_dark_mode: true
fork: true

csp: >
  default-src 'self'; 
  font-src 'self' https://cdnjs.cloudflare.com; 
  script-src 'self' https://cdn.jsdelivr.net/npm/feather-icons/dist/feather.min.js; 
  style-src 'self' https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css; 
  img-src 'self';
  media-src 'self';
  object-src 'none';
  worker-src 'self';
  base-uri 'self';
  frame-src 'none';
# Sidebar
contact:
  github: JamesAddis
  linkedin: jamesarthuraddis

education:
  - degree: Computer Science with AI (BSc)
    university: York University
certifications:
  - name: Certified Kubernetes Admin
    body: CNCF
    time: 2021
  - name: GCP Associate Cloud Engineer
    body: Google
    time: 2020

skills:
  - category: Programming Languages
    skill: 
      - C#
      - Javascript/Typescript
      - Golang
      - Python
  - category: Backend
    skill:
      - ASP NET Core (1-3)
      - Node.js
      - Linux
  - category: Frontend
    skill:
      - Angular (2+)
      - SASS/CSS
      - Progressive Web Apps
      - jQuery/Knockout
  - category: Cloud Platforms
    skill:
      - Google Cloud Platform (GCP)
      - Amazon Web Services (AWS)
  - category: DevOps
    skill:
      - Docker
      - Kubernetes
      - Ansible
      - Cloud-init
  - category: DevSecOps
    skill:
      - Seccomp/AppArmor
      - Falco
      - Open Policy Agent (OPA)
      - CIS Benchmarks

# Profile
profile: |
  Full Stack software developer with 7+ years experience, specialising in C#, Typescript, and Container (Docker, K8s).
  I am a passionate coder with an eye for reliant, fault-tolerant, and secure applications.
  I am always looking to improve my skills and knowledge set.

# Experience
experience:
  - role: Director
    time: July 2021-Present
    company: Addis Cloud Technologies Ltd
    details: |
      Created a Company, got fully vaccinated and ready to work!
      Currently studying for AWS certifications (Solutions Architect or Developer) and a CKS (Certified Kubernetes Security Specialist).
    technologies_used: |
      AWS, Lambda, CloudFormation, Falco, AppArmor, Trivy, K8s, OPA, PKI, CodeBuild

  - role: Sabbatical
    time: May 2019-July 2021
    company: "Freelance"
    details: |
      Took a year off, then the Pandemic hit, so I extended it until I got fully vaccinated, and due to my finances, I did not need to work.
      During this sabbatical, I independently developed my skills that I had not had the time to do while working.
      These mainly consisted of:
    list:
      - Cloud Platforms
      - Cloud-Native Architecture
      - DevOps Tooling and Culture
      - Security Architecture
      - Software Development Methodologies
    technologies_used: |
      GCP, Kubernetes, DevOps, Git, AWS, Azure, Jenkins

  - role: Senior BI Application Developer
    time: Feb 2016 - May 2019
    company: Midlands and Lancashire Health Trust
    details: |
      Designing, developing and maintaining web applications for the Business Intelligence department.
      My responsibilities covered:
    list:
      - Architecting, developing, and maintaining Web and Desktop Software
      - Developing consistent fault-tolerant frontend code using Angular (for modern browsers) or jQuery and ASP NET razor (on legacy browsers)
      - Developing backend services using ASP NET Core (1-2) and Node.js
      - Designing Databases using T-SQL, Microsoft SQL Server, and custom procedures
      - Managing Linux server to run docker images (Redis and Selenium)
      - Editing C# code for SSRS reports developed on Microsoft BI Products
      - ETL preprocessing and automated data cleaning for SSRS or BI processes
      - Advising on web and software applications and their design
      - Collaboration on other projects handled by other teams and IT Consultants
      - Cloud platform integration
      - Custom data graphics and input widgets
      - Re-engineering legacy software projects left by previous staff members
      - Ensuring web application backward compatibility with Internet Explorer 8
      - Hardening Web applications (using Content Security Policy, CSRF tokens, etc.)
    technologies_used: |
      ASP NET Core (1-2), C#, Angular (2+), Typescript, Docker, IIS, Vue.js, T-SQL, MSSQL

  - role: Junior Analyst Developer
    time: Jan 2013 - Feb 2016
    company: East Lancashire Health Trust
    details: |
      Developing and maintaining Web applications for the Trust
      Due to the NHS reliance on older technology, I often have to design my applications with a higher degree of resilience than modern web apps.
      My responsibilities covered:
    list:
      - Developing and Maintaining ASP NET Web Form (VB.NET), MVC (3-5), or Web API (1-3) applications
      - Creating frontend code with Graceful Degradation (jQuery or Knockout) or Progressive Enhancement (no JS required server-rendered HTML forms) designs
      - Modernising Legacy Code
      - Sharepoint and other Microsoft product integration
      - C# ETL processes with Web interfaces to ensure data integrity and quality for Reporting purposes
      - Microsoft SQL Database Design and writing custom procedures
      - Ensuring web application backward compatibility with Internet Explorer 7

    technologies_used: |
      ASP NET MVC (3-5), ASP NET Web API, ASP NET Forms, C#, Javascript, jQuery, Knockout, VB.Net, SharePoint, T-SQL, MSSQL

projects:
  - title: Oracle Cloud Platform integration and ETL
    link: #
    details: |
      During my time at the MLCSU, I took the responsibility to re-write an ETL process that integrated with the Oracle Cloud Platform.
      Due to an update on the Cloud platform, the code no longer worked; add-in that the Login process had also changed rendered the software wholly broken.
      I refactor the application to have live progress and retry logic, as well as a level of resumable processing, if there was an error.
      This greatly automated a manual process that would take one of the MLCSU's teams multiple days to complete and reduce it down to a server running a process for 1 to 3 hours.

    list: 
      - Oracle Cloud Platform integration using unofficial api
      - Calling a Dockerized Selenium server to automate login
      - C# HttpClient with Polly library to handle errors and retry attempts
      - Real-time notifications using SSE (due to legacy browser requirements)
      - Redis pub/sub handle messaging
      - ASP NET Core 2 app to handle Web console and REST API + SSE notifications
      - C# Background Worker to scan files and trigger SSRS Reporting
      - Angular 2+ SPA to handle modern browsers and jQuery+Razor to handle older browser
  - title: Unity Patient Clerical Dashboard
    link: #
    details: |
      Projects for the ELHT included developing multiple Modules for a dashboard called "Unity".
      Unity allowed for management of certain research, and clerical information that were not available from off-the-shelf solutions.
      These consisted of mainly ASP NET MVC pages with ASP Net Web API and jQuery to add a faster and more interactive experience.
      
      I also updated the software with better design, an example of which was that the patient you currently selected was originally stored in a cookie.

      This caused problems for people who wanted to have multiple windows open with different patients, or wanted to go back to previous patient using the browser history after selecting a different patient.
      Using the Patient's RXR number instead in the Url as a path element, enabled users to bookmark and share links with other members of their teams directly and prevented issues with multiple open pages.

    list:
      - Better url pathing to allow for bookmarking and sharing of links
      - Dependency Injection (Asp Net MVC and Web API did not have it natively)
      - Polly Library to allow for better retry logic
      - Error reporting e-mails for backend and frontend issues
      - Progressive Enhancement with jQuery and Knockout (IE 7 support was needed)
      - Better validation using FluentValidation
      - Responsive Design to work on both large and small screens
  
