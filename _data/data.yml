name: James Addis
support_dark_mode: true
fork: true

csp: >
  default-src 'self'; 
  font-src 'self' https://cdnjs.cloudflare.com; 
  script-src 'self' https://cdn.jsdelivr.net/npm/feather-icons/dist/feather.min.js; 
  style-src 'self' https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css; 
  img-src 'self';
  media-src 'self';
  object-src 'none';
  worker-src 'self';
  base-uri 'self';
  frame-src 'none';
# Sidebar
contact:
  github: JamesAddis
  linkedin: jamesarthuraddis
  address:
    line1: Addis Cloud Technologies Ltd.
    line2: 71-75 Shelton Street
    city: London
    postCode: WC2H 9JQ

education:
  - degree: Computer Science with AI (BSc)
    university: York University
certifications:
  - name: Certified Kubernetes Admin
    body: CNCF
    time: 2021
  - name: GCP Associate Cloud Engineer
    body: Google
    time: 2020
  # - name: AWS DevOps Engineer

skills:
  - category: Programming Languages
    skill: 
      - C#
      - Javascript/Typescript
      - Golang
      - Python
  - category: Backend
    skill:
      - ASP NET Core (1-6)
      - Node.js
      - Linux
      - AWS Lambda/Azure Functions
      - ASP NET MVC (3-5)
  - category: Frontend
    skill:
      - Angular (2+)
      - Asp Net Core Blazor
      - SASS/CSS
      - jQuery/Knockout
  - category: Cloud Platforms
    skill:
      - Google Cloud Platform (GCP)
      - Amazon Web Services (AWS)
      - Microsoft Azure
  - category: DevOps
    skill:
      - Docker
      - Kubernetes
      - Terraform
      - CI/CD
  - category: DevSecOps
    skill:
      - Seccomp/AppArmor
      - Falco
      - Open Policy Agent (OPA)
      - CIS Benchmarks

# Profile
profile: |
  Full Stack software developer with 10+ years experience, specialising in C#, Typescript, and Container (Docker, K8s).
  I am a passionate coder with an eye for reliant, fault-tolerant, and secure applications.
  I am always looking to improve my skills and knowledge set.

# Experience
experience:
  - role: Kubernetes Contract Developer
    time: Dec 2022 - July 2024
    company: Cognizant/Microsoft/Met Office
    details: |
      Contracted by Cognizant, then provided to Microsoft, to work on a project being developed for the Met office. 
      Here I worked with multiple teams in an Agile environment, providing my Development/Cloud/DevOps skills.
      Mainly developing .NET/Kuberenetes applications to work with NetCDF files.
      Hybrid working, onsite for sprint beginning/end with remote working between.
      My duties included
    list:
      - Developing, and testing, backend software applications
      - Containerizing applications and creating Kubernetes resources to said containers
      - Developing CI/CD pipelines to automate build, test, and deployment
      - Tech support to other teams for DevOps (Azure, Bicep, Entra Id, K8s, Docker, Dapr, CI/CD) issues
      - Designing cloud replacements for on premise dependent software tools
      - Sprint Planning, and Refinement of User Stories (with or without other team members)
      - Helping architecture decisions + providing technical expertise (we had full time architect to support instead of doing it all ourselves)
      - Onboarding new team members + creating cloud resources (Dev VM, databases, storage accounts) for them
    technologies_used: |
      Azure, K8s, C#, Dapr, GraphQL, CI/CD, Bicep, Linux, Actor Model, NetCDF, BDD, Agile
  - role: Career Break - Professional development
    time: May 2022 - Nov 2022
  - role: Contract Developer
    time: September 2021 - April 2022
    company: Arden & GEM CSU
    details: |
      Developed a Azure hosted web portal for different organisations, which intergrated multiple reports (Tableau or otherwise).
    list:
      - Ensuring web application backward compatibility with Internet Explorer
      - Using Azure DevOps to plan tasks and track sprints using Agile Methodology
      - Integrating Different Platforms (Tableau and Azure)
      - Developing Unit and Integration Tests for applications
      - Automating Build, Test and Publish steps using CI/CD
      - Angular (11 due to IE) Frontend
      - Angular Bootstrap to integrate Bootstrap css/sass and js with Angular app
      - ASP NET CORE (3-5) to implement Backend
      - Tableau JS Library to integrate Tableau Server reports into Angular app
      - Azure Pipelines for CI/CD
      - XUnit, Autofixture and Moq to create Unit and Integration tests
      - Azure DevOps for Source Control and Agile sprint/task boards
      - Azure App Engine for PaaS to host Web App
      - AzureSQL to host Database
      - Azure Blob storage for object storage
      - ClamAV for scanning for malware on files uploaded to server
      - Azure Api Management to integrate with REST API services and give developer documentation for the app
      - Managed Identity to authenticate web app to database, object storage, and other services
      - Okta for OpenID Connect Client Authentication
      - Docker for integration tests with Azurite (emulated blob and queue storage), and containerized MSSQL for SQL database
    technologies_used: |
      Azure, Tableau, CI/CD, C#, Typescript, ASP NET CORE (3-5), Azure DevOps, Agile, Okta, ClamAV, Automated Testing
  
  - role: Career Break
    time: May 2019 - August 2021
    company: "Freelance"
    details: |
      Took a year off, then the Pandemic hit, so I extended it until I got fully vaccinated, and due to my finances, I did not need to work.
      During this sabbatical, I independently developed my skills that I had not had the time to do while working.
      These mainly consisted of:
    list:
      - Cloud Platforms
      - Cloud-Native Architecture
      - DevOps Tooling and Culture
      - Security Architecture
      - Software Development Methodologies
    technologies_used: |
      GCP, Kubernetes, DevOps, Git, AWS, Azure, Jenkins

  - role: Senior BI Application Developer
    time: Feb 2016 - May 2019
    company: Midlands and Lancashire Health Trust
    details: |
      Designing, developing and maintaining web applications for the Business Intelligence department.
      My responsibilities covered:
    list:
      - Architecting, developing, and maintaining Web and Desktop Software
      - Developing consistent fault-tolerant frontend code using Angular (for modern browsers) or jQuery and ASP NET razor (on legacy browsers)
      - Developing backend services using ASP NET Core (1-2) and Node.js
      - Designing Databases using T-SQL, Microsoft SQL Server, and custom procedures
      - Managing Linux server to run docker images (Redis and Selenium)
      - Editing C# code for SSRS reports developed on Microsoft BI Products
      - ETL preprocessing and automated data cleaning for SSRS or BI processes
      - Advising on web and software applications and their design
      - Collaboration on other projects handled by other teams and IT Consultants
      - Cloud platform integration
      - Custom data graphics and input widgets
      - Re-engineering legacy software projects left by previous staff members
      - Ensuring web application backward compatibility with Internet Explorer 8
      - Hardening Web applications (using Content Security Policy, CSRF tokens, etc.)
    technologies_used: |
      ASP NET Core (1-2), C#, Angular (2+), Typescript, Docker, IIS, Vue.js, T-SQL, MSSQL

  - role: Junior Analyst Developer
    time: Jan 2013 - Feb 2016
    company: East Lancashire Health Trust
    details: |
      Developing and maintaining Web applications for the Trust
      Due to the NHS reliance on older technology, I often have to design my applications with a higher degree of resilience than modern web apps.
      My responsibilities covered:
    list:
      - Developing and Maintaining ASP NET Web Form (VB.NET), MVC (3-5), or Web API (1-3) applications
      - Creating frontend code with Graceful Degradation (jQuery or Knockout) or Progressive Enhancement (no JS required server-rendered HTML forms) designs
      - Modernising Legacy Code
      - Sharepoint and other Microsoft product integration
      - C# ETL processes with Web interfaces to ensure data integrity and quality for Reporting purposes
      - Microsoft SQL Database Design and writing custom procedures
      - Ensuring web application backward compatibility with Internet Explorer 7

    technologies_used: |
      ASP NET MVC (3-5), ASP NET Web API, ASP NET Forms, C#, Javascript, jQuery, Knockout, VB.Net, SharePoint, T-SQL, MSSQL

projects:
  - title: Met Office Azure Migration
    link: https://news.microsoft.com/en-gb/2021/04/22/met-office-and-microsoft-join-forces-to-build-worlds-most-powerful-weather-and-climate-forecasting-supercomputer-in-uk/
    details: |
      During my time at Microsoft, I worked with multiple teams involved in the Met Office upgrading their software tools to run in the cloud.
      This included working with workflows involving NetCDF files and Petabytes of scientific data.
    list:
      - C# (.NET 6-8) for software
      - Asp Net Core (6-8) with Hot Chocolate (GraphQL) for flexible REST Apis
      - MSTest for Unit Testing (and some integration tests)
      - Specflow for BDD and E2E testing
      - Backend services hosted as Microservices in K8s to allow for efficient scaling and reliability
      - Helm for K8s deployment
      - Docker to containerize microservices
      - Azure DevOps Pipelines (YAML) for CI/CD
      - Powershell + Azure CLI for scripting
      - Bicep for provisioning
      - Microsoft SQL Server (T-SQl & EntityFramework Core) + CosmosDb (NoSql) for database Services
      - Redis for cache
      - Azure Blob Storage for object storage
      - Azure File Storage for file storage (with CSI Drivers for K8s volumes)
      - Azure Key Vault for Secrets, Certificates and Key Management (with Dapr components + CSI drivers for k8s integration)
      - Azure Service Bus for queues/topics to provide asynchronous communication and decouple services
      - Entra Id for IAM and OpenId Connect (Workload+Pod Identity for K8s integration)
      - Dapr Actors for orchestrating reliable workflows
      - Support other team members working on frontend applications with Blazor
      - Ubuntu + bash + Docker/Podman for Linux testing
      - Minikube/KinD and Docker/Podman Desktop for local development
  - title: Athena Portal and ReIdent
    link: #
    details: |
      During my time at the Arden & GEM CSU, I took the responsibility to architect and develop Athena.
      Athena was a web portal which integrated multiple reports (mostly Tableau reports), and reduced data given to said reports to be only relevant customer.
      I also worked partially on ReIdent, which was a REST API which took Pseudonymised patient IDs and return the real details of said patients.
      So authorised users (usually clinicians) could get contact information of patients who were flagged in reports.
    list: 
      - Angular (11) Frontend with backwards compatibility with Internet Explorer
      - Angular Bootstrap to integrate Bootstrap css/sass and js with Angular app
      - ASP NET CORE (3-5) to implement Backend
      - Tableau JS Library to integrate Tableau Server reports into Angular app
      - "Azure Pipelines for CI/CD, to automate: lint, build, test, publish, and deployment"
      - XUnit, Autofixture and Moq to create Unit and Integration tests
      - Azure DevOps for Source Control and Agile sprint/task tracking
      - Azure App Service for PaaS to host Web App
      - AzureSQL to host Database (MSSQL)
      - Azure Blob storage for uploaded file Reports, CSVs and such
      - ClamAV for scanning for malware on files uploaded to server
      - ETL process for updating all customer organisation structures from CSVs
      - Role and permission assignment based on Organisation and Job Type
      - Custom registration and approval for new users
      - Azure Api Management to integrate with other Azure hosted REST API services, and secure internal access to specified apps
      - OpenAPI and Swashbuckle to generate developer documentation for the app
      - Managed Identity to authenticate web app to database, object storage, and other services
      - Okta for OpenID Connect (OIDC) external Client Authentication
      - Docker for integration tests with Azurite (emulated blob and queue storage), Keycloak (OIDC) and MSSQL for T-SQL
  - title: Oracle Cloud Platform integration and ETL
    link: #
    details: |
      During my time at the MLCSU, I took the responsibility to re-write an ETL process that integrated with the Oracle Cloud Platform.
      Due to an update on the Cloud platform, the code no longer worked; add-in that the Login process had also changed rendered the software wholly broken.
      I refactor the application to have live progress and retry logic, as well as a level of resumable processing, if there was an error.
      This greatly automated a manual process that would take one of the MLCSU's teams multiple days to complete and reduce it down to a server running a process for 1 to 3 hours.

    list: 
      - Oracle Cloud Platform integration using unofficial api
      - Calling a Dockerized Selenium server to automate login
      - C# HttpClient with Polly library to handle errors and retry attempts
      - Real-time notifications using SSE (due to legacy browser requirements)
      - Redis pub/sub handle messaging
      - ASP NET Core 2 app to handle Web console and REST API + SSE notifications
      - C# Background Worker to scan files and trigger SSRS Reporting
      - Angular 2+ SPA to handle modern browsers and jQuery+Razor to handle older browser
  - title: Unity Patient Clerical Dashboard
    link: #
    details: |
      Projects for the ELHT included developing multiple Modules for a dashboard called "Unity".
      Unity allowed for management of certain research, and clerical information that were not available from off-the-shelf solutions.
      These consisted of mainly ASP NET MVC pages with ASP Net Web API and jQuery to add a faster and more interactive experience.
      
      I also updated the software with better design, an example of which was that the patient you currently selected was originally stored in a cookie.

      This caused problems for people who wanted to have multiple windows open with different patients, or wanted to go back to previous patient using the browser history after selecting a different patient.
      Using the Patient's RXR number instead in the Url as a path element, enabled users to bookmark and share links with other members of their teams directly and prevented issues with multiple open pages.

    list:
      - Better url pathing to allow for bookmarking and sharing of links
      - Dependency Injection (Asp Net MVC and Web API did not have it natively)
      - Polly Library to allow for better retry logic
      - Error reporting e-mails for backend and frontend issues
      - Progressive Enhancement with jQuery and Knockout (IE 7 support was needed)
      - Better validation using FluentValidation
      - Responsive Design to work on both large and small screens
  
